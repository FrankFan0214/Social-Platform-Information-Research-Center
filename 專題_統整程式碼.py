# -*- coding: utf-8 -*-
"""專題-統整程式碼.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lLj9OVmntewbUHutTlrIxJrBtNX5tm8Q

### ***Install & Import***
"""

!pip install pymongo
!pip install mysql-connector-python
!pip install jieba
!pip install pandas
!pip install nltk
!pip install textblob

import os
import pandas as pd
import pymongo
import mysql.connector
import jieba
import re
import heapq
import nltk
import json
import logging
import textblob
import numpy as np
from pymongo import MongoClient
from mysql.connector import Error
from collections import Counter, defaultdict
from datetime import datetime
from nltk.sentiment import SentimentIntensityAnalyzer
from typing import List, Dict, Any
from concurrent.futures import ThreadPoolExecutor
from functools import lru_cache

"""### ***Stopwords & Emotion Dictionary***"""

stopwords = {
    "17","八卦","記者", "Sent", "21", "20", "on", "my", "12", "16", "!","#","$","%","&","'","(",")","*","+",",","-","--",".","【", "】","\n"
    "..","...","/","0","1","2","3","4","5","6","7","8","9", "11", "17", "18", "19",
    ":",";","<","=",">",">>","?","@","A","[","]","^","_","`","|",
    "~","·","—","——","‘","’","“","”","…","、","。","〈","〉","《","》",

    "一","一些","一何","一來","一切","一则","一則","一方面","一旦","一来",
    "一样","一樣","一般","一转眼","七","万一","三","三天兩頭","三番五次",
    "三番兩次","上","上下","上來","上去","下","不","不下","不了","不亦樂乎",
    "不仅","不但","不但...而且","不僅","不僅...而且","不僅僅","不僅僅是",
    "不光","不免","不再","不力","不勝","不单","不只","不可抗拒","不可開交",
    "不同","不問","不單","不外","不外乎","不大","不如","不妨","不定","不對",
    "不少","不尽","不尽然","不巧","不已","不常","不得","不得不","不得了","不得已",
    "不必","不怎麼","不怕","不惟","不成","不拘","不擇手段","不料","不日","不是",
    "不時","不曾","不會","不止","不止一次","不比","不消","不滿","不然","不然的話",
    "不特","不独","不獨","不由得","不知不覺","不管","不管怎樣","不經意","不能","不能不",
    "不至于","不至於","不若","不要","不論","不论","不起","不过","不迭","不過","不问",
    "不限","与","与其","与其说","与否","与此同时","且","且不说","且说","两者","並",
    "並且","並沒","並沒有","並無","並肩","並非","个","个别","串列","临","为","为了",
    "为什么","为何","为止","为此","为着","乃","乃至","乃至于","么","之","之一","之所以",
    "之类","之類","乌乎","乎","乒","乘","乘勝","乘勢","乘機","乘虛","乘隙","九","也",
    "也好","也罢","也罷","了","二","二来","二話不說","二話沒說","于","于是","于是乎",
    "云云","云尔","互","互相","五","些","交口","亦","人","人人","人们","人家","人民",
    "什么","什么样","什麼","什麼樣","今","介于","仍","仍旧","仍然","仍舊","从","从此",
    "从而","他","他人","他们","他們","以","以上","以为","以便","以免","以及","以故",
    "以期","以来","以至","以至于","以至於","以致","们","任","任何","任凭","任憑",
    "似的","但","但凡","但是","但願","何","何以","何况","何嘗","何处","何妨","何必",
    "何时","何時","何樂而不為","何止","何況","何苦","何處","何須","余外","作为", "表示"
    "作為","你","你们","你們","併排","使","使得","來","來不及","來得及","來看","來著",
    "來講","例如","依","依据","依照","便","便于","保管","保險","俺","俺们","個","個人",
    "倍加","倍感","們","倒不如","倒不如說","倒是","倘","倘使","倘或","倘然","倘若","借",
    "假使","假如","假若","偏偏","偶爾","偶而","傥然","傳","傳聞","傳說","僅","僅僅","像",
    "儘可能","儘快","儘早","儘管","儘管如此","儘量","儿","充其極","充其量","充分","先不先",
    "光","光是","內","全体","全力","全年","全然","全身心","全部","全都","兩者","八","八成",
    "公然","六","兮","共","共總","关于","其","其一","其中","其二","其他","其余","其它","其實",
    "其後","其次","其餘","具体地说","具体说来","具體來說","具體地說","具體說來","兼之","内",
    "再","再其次","再则","再有","再者","再者说","再說","再说","冒","冲","况且","凝神","几",
    "几时","凡","凡是","凭","凭借","出","出于","出來","出去","出来","分别","分期","分期分批",
    "分頭","切","切不可","切切","切勿","切莫","则","则甚","初","別","別人","別的","別說","别",
    "别人","别处","别是","别的","别管","别说","到","到了兒","到底","到目前為止","到處","到頭",
    "到頭來","則","前后","前後","前此","前者","剛","剛好","剛巧","剛才","加上","加之","加以",
    "勃然","動不動","動輒","匆匆","千","千萬","千萬千萬","半","即","即令","即使","即便","即刻",
    "即如","即將","即或","即是說","即若","却","去","又","又及","及","及其","及至","反之",
    "反之亦然","反之則","反倒","反倒是","反手","反而","反过来","反过来说","反過來","反過來說",
    "取道","受到","古來","另","另一個","另一方面","另外","另悉","另方面","另行","只","只当",
    "只怕","只是","只有","只消","只要","只限","叫","叮咚","叮噹","可","可以","可好","可是",
    "可能","可見","可见","各","各个","各位","各個","各式","各种","各種","各自","同","同时",
    "同時","后","后者","向","向使","向着","向著","吓","吗","否则","否則","吧","吧哒","吧噠",
    "吱","吶","呀","呃","呆呆地","呕","呗","呜","呜呼","呢","呵","呵呵","呸","呼哧","呼啦",
    "咋","和","咚","咦","咧","咱","咱们","咱們","咳","哇","哈","哈哈","哉","哎","哎呀",
    "哎哟","哎喲","哗","哟","哦","哩","哪","哪个","哪些","哪個","哪儿","哪兒","哪天","哪年",
    "哪怕","哪样","哪樣","哪裏","哪边","哪邊","哪里","哼","哼唷","唄","唉","唯有","啊","啊呀",
    "啊哈","啊喲","啐","啥","啦","啪达","啪達","啷当","喀","喂","喏","喔唷","單", "jpeg"
    "單單","單純","喲","喽","嗎","嗚","嗚呼","嗡","嗡嗡","嗬","嗯","嗳","嘎","嘎嘎","嘎登",
    "嘔","嘘","嘛","嘩","嘩啦","嘻","嘿","嘿嘿","噓","噯","嚇","四","因","因为","因了", "表示"
    "因此","因為","因着","因而","固","固然","在","在下","在于","地","均","基于","基於",
    "基本","基本上","处在","多","多么","多多","多多少少","多多益善","多少","多年來","多年前",
    "多次","多虧","夠瞧的","夥同","大","大不了","大事","大凡","大多","大大","大家","大張旗鼓",
    "大抵","大概","大略","大約","大致","大舉","大都","大面兒上","大體","大體上","奇","奈",
    "奮勇","她","她们","她們","好","好在","如","如上","如上所述","如下","如今","如何", "jpeg"
    "如其","如前所述","如同","如常","如是","如期","如果","如次","如此","如此等等","如若",
    "始而","姑且","存心","孰料","孰知","宁","宁可","宁愿","宁肯","它","它们","它們", "jpg"
    "定","寧","寧可","寧肯","寧願","对","对于","对待","对方","对比","将","將","將才", "17"
    "將要","將近","對","對於","小","尔","尔后","尔尔","尚且","就","就地","就是","就是了",
    "就是說","就是说","就此","就算","就要","尽","尽管","尽管如此","局外","居然","屆時",
    "屢","屢屢","屢次","屢次三番","岂但","川流不息","差一點","差不多","己","已", "jpg"
    "已矣","巴","巴巴","帶","常","常常","常言說","常言說得好","常言道","平素","年覆一年",
    "并","并且","并非","幾","幾乎","幾度","幾時","幾番","幾經","庶乎","庶几","开外",
    "开始","弗","彈指之間","归","归齐","当","当地","当然","当着","彼","彼时","彼此",
    "往","待","待到","很","很多","很少","後來","得","得了","得天獨厚","得起","從", "17"
    "從不","從中","從今以後","從來","從優","從古到今","從古至今","從嚴","從寬","從小",
    "從新","從早到晚","從未","從此","從此以後","從無到有","從而","從輕","從速","從重",
    "從頭","徹夜","必","必定","必將","必須","快","快要","忽地","忽然","怎","怎么",
    "怎么办","怎么样","怎奈","怎样","怎樣","怎麼","怎麼樣","怎麼辦","怕","急匆匆",
    "怪","怪不得","总之","总的来看","总的来说","总的说来","总而言之","恍然","恐怕",
    "恰似","恰好","恰如","恰巧","恰恰","恰恰相反","恰逢","您","惟其","慢說","慢说",
    "慣常","憑","憑藉","憤然","成年","成年累月","成心","我","我们","我們","或", "知道"
    "或则","或多或少","或是","或曰","或者","或許","截然","截至","所","所以","所在",
    "所幸","所有","才","才能","打","打从","打從","打開天窗說亮話","把","抑或","抽冷子",
    "拿","按","按時","按期","按照","按理","按說","挨個","挨家挨戶","挨次","挨著",
    "挨門挨戶","挨門逐戶","换句话说","换言之","据","据此","接下來","接着","接著",
    "接連不斷","換句話說","換言之","撲通","據","據實","據悉","據我所知","據此","據稱",
    "據說","攔腰","放量","故","故意","故此","故而","敞開兒","敢","敢情","敢於", "知道"
    "斷然","方","方才","方能","於","於是","於是乎","旁人","无","无宁","无论","既",
    "既...又","既往","既是","既然","日漸","日益","日臻","日覆一日","日見","时候",
    "昂然","是","是以","是的","時候","暗中","暗地裏","暗自","更","更加","更為",
    "更進一步","曾","替","替代","最","會","有","有些","有关","有及","有时","有的",
    "有關","望","朝","朝着","朝著","末##末","本","本人","本地","本着","本著", "覺得"
    "本身","来","来着","来自","来说","极了","果然","果真","某","某个","某些",
    "某個","某某","根据","根據","格外","梆","極","極了","極其","極力","極大",
    "極度","極為","極端","概","權時","次第","欤","正值","正如","正巧","正是",
    "此","此中","此地","此处","此外","此後","此时","此次","此間","此间","歷",
    "歸","歸根到底","歸根結底","殆","毋宁","毋寧","每","每当","每時每刻","每每",
    "每當","每逢","比","比及","比如","比如說","比方","比照","比起","毫不","毫無",
    "毫無例外","毫無保留地","汝","決不","決非","沒","沒有","沖","沙沙","没奈何",
    "沿","沿着","沿著","況且","活","湊巧","滿","漫說","漫说","為","為了","為什麼",
    "為何","為著","烏乎","焉","無寧","無論","然","然则","然則","然后","然後","然而",
    "照","照着","照著","爾後","爾等","牢牢","犹且","犹自","猛然","猛然間","獨",
    "獨自","率然","率爾","理應","理當","理該","瑟瑟","甚且","甚么","甚或","甚而",
    "甚至","甚至于","甚麼","用","用来","甫","甭","由","由于","由於","由是","由此",
    "由此可見","由此可见","畢竟","略","略加","略微","略為","當","當下","當中", "覺得"
    "當兒","當即","當口兒","當場","當庭","當然","當真","當著","當頭","白","白白",
    "的","的确","的確","的話","的话","皆可","盡","盡如人意","盡心盡力","盡心竭力","盡然",
    "直到","相对而言","相對而言","省得","看","看上去","看來","看樣子","看起來","眨眼",
    "着","着呢","矣","矣乎","矣哉","砰","碰巧","社會主義","离","究竟","窮年累月",
    "竊","立","立刻","立地","立時","立馬","竟","竟然","竟而","第","等","等到",
    "等等","策略地","简言之","管","簡直","簡而言之","簡言之","类如","粗","精光","純",
    "純粹","紧接着","累年","累次","結果","絕","絕不","絕對","絕非","絕頂","給","經",
    "經常","經過","綜上所述","緊接著","縱","縱令","縱使","縱然","縷縷","總之","總的來看",
    "總的來說","總的說來","總而言之","繼之","繼而","纵","纵令","纵使","纵然","经","经过","结果",
    "给","继之","继后","继而","综上所述","罢了","罷了","老","老大","老是","老老實實",
    "者","而","而且","而况","而又","而后","而外","而已","而後","而是","而況","而言","而論",
    "聯袂","背地裏","背靠背","能","能否","腾","臨","臨到","自","自个儿","自从","自個兒",
    "自各儿","自各兒","自后","自家","自己","自從","自打","自身","臭","至","至于",
    "至今","至於","至若","致","與","與其","與否","與此同時","舉凡","般的","若",
    "若夫","若是","若果","若非","莫","莫不","莫不然","莫如","莫若","莫非","萬一",
    "著","著呢","藉以","藉此","處處","虽","虽则","虽然","虽说","蠻","被","要","要不",
    "要不是","要不然","要么","要是","要麼","見","親口","親手","親眼","親自","親身",
    "設使","設若","話說","該","該當","誠然","誰","誰知","請勿","論","論說","諸位","謹",
    "譬喻","譬如","讓","让","许多","论","设使","设或","设若","诚如","诚然","该",
    "说来","诸","诸位","诸如","谁","谁人","谁料","谁知","豁然","豈","豈但","豈止",
    "豈非","贼死","赖以","赶","起","起來","起先","起初","起見","起见","起頭","起首",
    "趁","趁便","趁勢","趁早","趁機","趁熱","趁着","趁著","越是","趕","趕快",
    "趕早不趕晚","距","跟","路經","較","較之","較比","較為","轟然","较","较之","边",
    "迄","过","近","近來","近年來","近幾年來","还","还是","还有","还要","这","这一来",
    "这个","这么","这么些","这么样","这么点儿","这些","这会儿","这儿","这就是说",
    "这时","这样","这次","这般","这边","这里","进而","连","连同","迫於","逐步",
    "這","這些","這個","這兒","這就是說","這時","這會兒","這樣","這裏","這邊","這麼",
    "這麼些","這麼樣","這麼點兒","通过","通過","逢","連","連同","連日","連日來",
    "連聲","連袂","連連","進來","進去","進而","過","過於","達旦","遲早","遵循","遵照",
    "還","還是","還有","邊","那","那个","那么","那么些","那么样","那些","那会儿","那個","那儿",
    "那兒","那时","那時","那會兒","那末","那样","那樣","那般","那裏","那边","那邊","那里",
    "那麼","那麼些","那麼樣","都","鄙人","鉴于","鑒於","针对","長期以來","長此下去","長線",
    "長話短說","開外","開始","間或","關於","阿","陡然","除","除了","除卻","除去","除外","除开",
    "除此","除此之外","除此以外","除此而外","除開","除非","陳年","随","随后","随时",
    "随着","隔夜","隔日","隨","隨著","难道说","雖","雖則","雖然","雖說","離","難得",
    "難怪","難說","難道","雲雲","零","非但","非常","非徒","非得","非特","非独","完整", "10"
    "靠","頂多","頃","頃刻","頃刻之間","頃刻間","順","順著","頓時","頗","顺", "表示"
    "顺着","風雨無阻","飽","餵","首先","馬上","騰","高低","麼","默然","默默地",
    "齊","︿","！","＃","＄","％","＆","（","）","＊","＋", "直接"
    "，","０","１","２","３","４","５","６","７","８","９","：", "知道"
    "；","＜","＞","？","＠","［","］","｛","｜","｝","～", "直接", "10", "表示"
    "￥","剛剛","之前","安安","某個","最近","這就","事情","原因","昨天","今天","明天",
    "這個","那個","如果","其實","即使","如題","大家","同時","以下","各位","真的","以前",
    "以後","未來","是否","目前","要講","這兩個","前天","這樣","那樣","看起","一堆",
    "一個","有人","https","如題","媒體""來源", "台灣", "imgur", "www", "媒體",
    "違者", "看到", "com", "新聞", "來源", "文章", "以前", "刪除", "現在", "15", "一嘔",
    "表示", "知道", "jpg", "jpeg", "覺得", "from", "這次", "一直", "17",

}

# 定義情緒詞典
EMOTION_DICT = {
    # 喜悅
    '開心': '喜悅', '快樂': '喜悅', '高興': '喜悅', '興奮': '喜悅',
    '愉快': '喜悅', '歡喜': '喜悅', '開朗': '喜悅', '暢快': '喜悅',
    '歡樂': '喜悅', '笑': '喜悅', '微笑': '喜悅', '大笑': '喜悅',
    '欣喜': '喜悅', '欣慰': '喜悅', '喜悅': '喜悅', '喜氣洋洋': '喜悅',
    '眉開眼笑': '喜悅', '樂呵呵': '喜悅', '樂滋滋': '喜悅', '喜形於色': '喜悅',
    '心花怒放': '喜悅', '春風得意': '喜悅', '得意洋洋': '喜悅', '歡天喜地': '喜悅',
    '興高采烈': '喜悅', '喜氣盈門': '喜悅', '笑逐顏開': '喜悅', '笑容滿面': '喜悅',
    '喜笑顏開': '喜悅', '欣欣然': '喜悅', '雀躍': '喜悅', '飛揚': '喜悅',
    '歡欣': '喜悅', '歡快': '喜悅', '愉悅': '喜悅', '喜不自勝': '喜悅',
    '欣喜若狂': '喜悅', '樂不可支': '喜悅', '笑嘻嘻': '喜悅', '眉飛色舞': '喜悅',
    '心曠神怡': '喜悅', '舒暢': '喜悅', '愉快': '喜悅', '歡愉': '喜悅',
    '喜氣': '喜悅', '喜慶': '喜悅', '歡暢': '喜悅', '怡然': '喜悅',


    # 安心
    '放心': '安心', '安心': '安心', '踏實': '安心', '安穩': '安心',
    '平安': '安心', '安定': '安心', '安寧': '安心', '鎮定': '安心',
    '穩重': '安心', '沉著': '安心', '泰然': '安心', '安詳': '安心',
    '安泰': '安心', '安然': '安心', '安適': '安心', '安逸': '安心',
    '安祥': '安心', '安和': '安心', '安樂': '安心', '安靜': '安心',
    '安分': '安心', '安居': '安心', '安度': '安心', '安妥': '安心',
    '安恬': '安心', '安好': '安心', '安康': '安心', '安全': '安心',
    '安生': '安心', '安身': '安心', '安土': '安心', '安養': '安心',
    '安泊': '安心', '安置': '安心', '安眠': '安心', '安歇': '安心',
    '安枕': '安心', '安然無恙': '安心', '安之若素': '安心', '安身立命': '安心',
    '安營扎寨': '安心', '安營紮寨': '安心', '安步當車': '安心', '安居樂業': '安心',
    '安堵': '安心', '安頓': '安心', '安排': '安心', '安息': '安心',


    # 期待
    '期待': '期待', '期盼': '期待', '盼望': '期待', '希望': '期待',
    '憧憬': '期待', '展望': '期待', '嚮往': '期待', '企盼': '期待',
    '冀望': '期待', '期許': '期待', '期望': '期待', '渴望': '期待',
    '企望': '期待', '盼': '期待', '盼念': '期待', '守望': '期待',
    '期求': '期待', '期念': '期待', '翹首': '期待', '翹盼': '期待',
    '翹企': '期待', '翹望': '期待', '瞻望': '期待', '盼顧': '期待',
    '盼佇': '期待', '期凝': '期待', '期盼': '期待', '期待': '期待',
    '望眼欲穿': '期待', '翹首以待': '期待', '引領期盼': '期待', '盼星星盼月亮': '期待',
    '望穿秋水': '期待', '殷切期待': '期待', '引頸期待': '期待', '期期艾艾': '期待',
    '期頤': '期待', '期勉': '期待', '期約': '期待', '期待': '期待',
    '盼顧': '期待', '盼望': '期待', '盼歸': '期待', '盼著': '期待',


    # 驚訝
    '驚訝': '驚訝', '震驚': '驚訝', '吃驚': '驚訝', '詫異': '驚訝',
    '意外': '驚訝', '驚奇': '驚訝', '驚詫': '驚訝', '愕然': '驚訝',
    '驚愕': '驚訝', '驚異': '驚訝', '驚歎': '驚訝', '讚歎': '驚訝',
    '驚嘆': '驚訝', '驚恐': '驚訝', '驚懼': '驚訝', '驚慌': '驚訝',
    '驚惶': '驚訝', '驚惶失措': '驚訝', '驚慌失措': '驚訝', '大吃一驚': '驚訝',
    '目瞪口呆': '驚訝', '瞠目結舌': '驚訝', '駭然': '驚訝', '震駭': '驚訝',
    '愣住': '驚訝', '怔住': '驚訝', '呆住': '驚訝', '嚇': '驚訝',
    '嚇一跳': '驚訝', '錯愕': '驚訝', '震悚': '驚訝', '咋舌': '驚訝',
    '詫': '驚訝', '駭': '驚訝', '愣': '驚訝', '怔': '驚訝',
    '嘖嘖稱奇': '驚訝', '嘖嘖稱異': '驚訝', '驚為天人': '驚訝', '瞪目結舌': '驚訝',
    '瞠目': '驚訝', '愣神': '驚訝', '發愣': '驚訝', '發怔': '驚訝',


    # 生氣
    '生氣': '生氣', '憤怒': '生氣', '火大': '生氣', '惱火': '生氣',
    '暴怒': '生氣', '氣憤': '生氣', '惱怒': '生氣', '發飆': '生氣',
    '動怒': '生氣', '發怒': '生氣', '發火': '生氣', '惱羞': '生氣',
    '光火': '生氣', '氣沖沖': '生氣', '怒氣沖天': '生氣', '怒髮衝冠': '生氣',
    '氣急敗壞': '生氣', '氣憤填膺': '生氣', '怒不可遏': '生氣', '暴跳如雷': '生氣',
    '火冒三丈': '生氣', '大發雷霆': '生氣', '怒氣衝衝': '生氣', '氣惱': '生氣',
    '惱': '生氣', '怒': '生氣', '憤': '生氣', '怨': '生氣',
    '怨恨': '生氣', '憎': '生氣', '憤恨': '生氣', '憤憤': '生氣',
    '憤然': '生氣', '憤慨': '生氣', '憤懣': '生氣', '憎恨': '生氣',
    '氣炸': '生氣', '氣瘋': '生氣', '氣死': '生氣', '氣壞': '生氣',
    '氣急': '生氣', '氣極': '生氣', '氣憋': '生氣', '氣悶': '生氣',


    # 討厭
    '討厭': '討厭', '厭惡': '討厭', '煩': '討厭', '嫌惡': '討厭',
    '反感': '討厭', '憎惡': '討厭', '厭煩': '討厭', '嫌棄': '討厭',
    '厭倦': '討厭', '厭棄': '討厭', '討人厭': '討厭', '嫌': '討厭',
    '嫌棄': '討厭', '嫌惡': '討厭', '嫌厭': '討厭', '討嫌': '討厭',
    '煩躁': '討厭', '煩悶': '討厭', '煩心': '討厭', '煩惱': '討厭',
    '厭世': '討厭', '厭煩': '討厭', '厭惡': '討厭', '厭棄': '討厭',
    '厭憎': '討厭', '厭倦': '討厭', '厭膩': '討厭', '厭棄': '討厭',
    '憎恨': '討厭', '憎惡': '討厭', '憎嫌': '討厭', '憎厭': '討厭',
    '反胃': '討厭', '反感': '討厭', '反對': '討厭', '反惡': '討厭',
    '嫌棄': '討厭', '嫌厭': '討厭', '嫌惡': '討厭', '嫌憎': '討厭',
    '討厭': '討厭', '討人嫌': '討厭', '討人厭': '討厭', '討不喜': '討厭',


    # 難過
    '難過': '難過', '傷心': '難過', '悲傷': '難過', '哀傷': '難過',
    '悲痛': '難過', '痛心': '難過', '哭泣': '難過', '心疼': '難過',
    '悲': '難過', '哀': '難過', '愁': '難過', '憂': '難過',
    '苦': '難過', '慟': '難過', '痛': '難過', '傷': '難過',
    '悲哀': '難過', '悲痛': '難過', '悲慘': '難過', '悲涼': '難過',
    '悲戚': '難過', '悲憤': '難過', '悲憫': '難過', '悲泣': '難過',
    '悲切': '難過', '悲咽': '難過', '悲愴': '難過', '悲嘆': '難過',
    '悲鳴': '難過', '悲慟': '難過', '悲怨': '難過', '悲苦': '難過',
    '痛哭': '難過', '痛苦': '難過', '痛楚': '難過', '痛悔': '難過',
    '心酸': '難過', '心痛': '難過', '心碎': '難過', '心傷': '難過',
    '黯然': '難過', '黯淡': '難過', '慘然': '難過', '慘澹': '難過',


    # 焦慮
    '焦慮': '焦慮', '擔心': '焦慮', '憂慮': '焦慮', '不安': '焦慮',
    '緊張': '焦慮', '慌張': '焦慮', '惶恐': '焦慮', '憂心': '焦慮',
    '忐忑': '焦慮', '惴惴': '焦慮', '煎熬': '焦慮', '憂懼': '焦慮',
    '憂愁': '焦慮', '憂悶': '焦慮', '憂心忡忡': '焦慮', '憂心如焚': '焦慮',
    '忐忑不安': '焦慮', '坐立不安': '焦慮', '心神不寧': '焦慮', '心慌意亂': '焦慮',
    '心急如焚': '焦慮',

    # 正面
    '支持': '正面', '自由': '正面', '希望': '正面', '喜歡': '正面',
    '相信': '正面', '不錯': '正面', '同意': '正面', '嘻嘻': '正面',
    '贊同': '正面', '認可': '正面', '肯定': '正面', '讚賞': '正面',
    '欣賞': '正面', '贊成': '正面', '認同': '正面', '讚同': '正面',
    '支援': '正面', '支撐': '正面', '支援': '正面', '支持者': '正面',
    '擁護': '正面', '維護': '正面', '擁戴': '正面', '贊助': '正面',
    '自在': '正面', '自主': '正面', '自如': '正面', '自由自在': '正面',
    '解放': '正面', '開放': '正面', '無拘無束': '正面', '暢快': '正面',
    '嚮往': '正面', '期望': '正面', '期待': '正面', '冀望': '正面',
    '摯愛': '正面', '喜愛': '正面', '鍾愛': '正面', '愛慕': '正面',
    '篤信': '正面', '深信': '正面', '信任': '正面', '信賴': '正面',
    '優良': '正面', '良好': '正面', '優質': '正面', '出色': '正面',


    # 反感
    '噁心': '反感', '討厭': '反感', '不爽': '反感', '垃圾': '反感',
    '低能': '反感', '智障': '反感', '白痴': '反感', '白癡': '反感',
    '噁': '反感', '嫌惡': '反感', '厭惡': '反感', '反胃': '反感',
    '作嘔': '反感', '惡心': '反感', '嘔心': '反感', '嫌棄': '反感',
    '厭煩': '反感', '煩躁': '反感', '厭倦': '反感', '厭棄': '反感',
    '痛恨': '反感', '憎恨': '反感', '憎惡': '反感', '憎嫌': '反感',
    '反感': '反感', '反對': '反感', '抗議': '反感', '抵制': '反感',
    '嫌棄': '反感', '嫌厭': '反感', '嫌惡': '反感', '嫌憎': '反感',
    '排斥': '反感', '排擠': '反感', '排除': '反感', '驅逐': '反感',
    '唾棄': '反感', '唾罵': '反感', '咒罵': '反感', '辱罵': '反感',

    # 失望
    '可憐': '失望', '可悲': '失望', '不好': '失望', '失敗': '失望',
    '擔心': '失望', '隨便': '失望', '沮喪': '失望', '灰心': '失望',
    '喪氣': '失望', '泄氣': '失望', '氣餒': '失望', '頹喪': '失望',
    '失意': '失望', '消沉': '失望', '低落': '失望', '頹廢': '失望',
    '失落': '失望', '挫敗': '失望', '挫折': '失望', '打擊': '失望',
    '墮落': '失望', '沉淪': '失望', '沉淪': '失望', '萎靡': '失望',
    '衰敗': '失望', '衰退': '失望', '衰落': '失望', '衰微': '失望',
    '頹唐': '失望', '頹廢': '失望', '頹靡': '失望', '頹勢': '失望',
    '失望': '失望', '失意': '失望', '失落': '失望', '失志': '失望',
    '悲觀': '失望', '消極': '失望', '頹喪': '失望', '低迷': '失望',

    # 違規
#   '違規': '違規', '違法': '違規', '問題': '違規', '八卦': '違規',
#   '犯規': '違規', '違反': '違規', '觸法': '違規', '犯法': '違規',
#   '越軌': '違規', '違紀': '違規', '違章': '違規', '違例': '違規',
#   '違禁': '違規', '違約': '違規', '違背': '違規', '違逆': '違規',
#   '違抗': '違規', '違令': '違規', '違命': '違規', '違制': '違規',
#   '違犯': '違規', '違反': '違規', '違背': '違規', '違逆': '違規',
#   '違拗': '違規', '違悖': '違規', '違忤': '違規', '違諫': '違規',
#   '犯禁': '違規', '犯戒': '違規', '犯例': '違規', '犯規': '違規',
#   '越權': '違規', '越位': '違規', '越矩': '違規', '越界': '違規',
#   '觸犯': '違規', '觸法': '違規', '觸例': '違規', '觸規': '違規',

    # 貶低
    '白癡': '貶低', '智障': '貶低', '低能': '貶低', '白痴': '貶低',
    '笨蛋': '貶低', '蠢貨': '貶低', '廢物': '貶低', '無能': '貶低',
    '腦殘': '貶低', '蠢材': '貶低', '呆子': '貶低', '傻瓜': '貶低',
    '笨豬': '貶低', '蠢豬': '貶低', '笨蛋': '貶低', '笨拙': '貶低',
    '愚笨': '貶低', '愚蠢': '貶低', '愚昧': '貶低', '愚鈍': '貶低',
    '愚钝': '貶低', '愚魯': '貶低', '愚痴': '貶低', '愚懵': '貶低',
    '遲鈍': '貶低', '魯鈍': '貶低', '糊塗': '貶低', '癡呆': '貶低',
    '無知': '貶低', '無腦': '貶低', '沒腦': '貶低', '缺腦': '貶低',
    '蠢笨': '貶低', '蠢鈍': '貶低', '蠢拙': '貶低', '蠢態': '貶低',

    # 憤怒
    '生氣': '憤怒', '憤怒': '憤怒', '惱火': '憤怒', '暴怒': '憤怒',
    '火大': '憤怒', '發飆': '憤怒', '發火': '憤怒', '發怒': '憤怒',
    '氣憤': '憤怒', '氣惱': '憤怒', '氣炸': '憤怒', '氣瘋': '憤怒',
    '暴跳': '憤怒', '狂怒': '憤怒', '大怒': '憤怒', '震怒': '憤怒',
    '怒不可遏': '憤怒', '怒髮衝冠': '憤怒', '怒火中燒': '憤怒', '怒氣沖天': '憤怒',
    '火冒三丈': '憤怒', '大發雷霆': '憤怒', '雷霆之怒': '憤怒', '暴跳如雷': '憤怒',
    '氣急敗壞': '憤怒', '氣憤填膺': '憤怒', '怒形於色': '憤怒', '怒氣衝衝': '憤怒',
    '憤憤不平': '憤怒', '憤慨': '憤怒', '憤恨': '憤怒', '憤然': '憤怒',

    # 厭惡
    '討厭': '厭惡', '噁心': '厭惡', '厭煩': '厭惡', '厭惡': '厭惡',
    '嫌惡': '厭惡', '反感': '厭惡', '排斥': '厭惡', '抵制': '厭惡',
    '嫌棄': '厭惡', '嫌厭': '厭惡', '嫌憎': '厭惡', '厭棄': '厭惡',
    '憎惡': '厭惡', '憎恨': '厭惡', '痛恨': '厭惡', '可惡': '厭惡',
    '可憎': '厭惡', '可惡': '厭惡', '可厭': '厭惡', '可恨': '厭惡',
    '作嘔': '厭惡', '反胃': '厭惡', '嘔心': '厭惡', '惡心': '厭惡',
    '腥臭': '厭惡', '骯髒': '厭惡', '污穢': '厭惡', '齷齪': '厭惡',
    '骯髒': '厭惡', '污濁': '厭惡', '髒亂': '厭惡', '汙穢': '厭惡',

    # 質疑
    '質疑': '質疑', '懷疑': '質疑', '存疑': '質疑', '疑問': '質疑',
    '不信': '質疑', '狐疑': '質疑', '疑慮': '質疑', '疑竇': '質疑',
    '困惑': '質疑', '不解': '質疑', '納悶': '質疑', '費解': '質疑',
    '不明': '質疑', '不懂': '質疑', '不確定': '質疑', '不肯定': '質疑',
    '半信半疑': '質疑', '將信將疑': '質疑', '疑神疑鬼': '質疑', '疑雲': '質疑',
    '疑點': '質疑', '疑案': '質疑', '疑團': '質疑', '疑陣': '質疑',
    '不可信': '質疑', '不可靠': '質疑', '不可取': '質疑', '不可信賴': '質疑',
    '似是而非': '質疑', '模稜兩可': '質疑', '曖昧不明': '質疑', '撲朔迷離': '質疑',


    # 諷刺
    '諷刺': '諷刺', '嘲諷': '諷刺', '譏諷': '諷刺', '揶揄': '諷刺',
    '嘲笑': '諷刺', '訕笑': '諷刺', '譏笑': '諷刺', '恥笑': '諷刺',
    '冷嘲': '諷刺', '熱諷': '諷刺', '嘲弄': '諷刺', '戲弄': '諷刺',
    '譏刺': '諷刺', '譏評': '諷刺', '譏誚': '諷刺', '譏彈': '諷刺',
    '挖苦': '諷刺', '奚落': '諷刺', '嘲謔': '諷刺', '調侃': '諷刺',
    '訕笑': '諷刺', '訕謗': '諷刺', '訕評': '諷刺', '訕刺': '諷刺',
    '譏評': '諷刺', '貶損': '諷刺', '貶抑': '諷刺', '貶低': '諷刺',
    '嘲弄': '諷刺', '戲謔': '諷刺', '取笑': '諷刺', '笑話': '諷刺',

    # 不滿
    '不滿': '不滿', '不爽': '不滿', '不悅': '不滿', '不快': '不滿',
    '不服': '不滿', '不甘': '不滿', '不平': '不滿', '不願': '不滿',
    '不樂': '不滿', '不安': '不滿', '不適': '不滿', '不舒': '不滿',
    '抱怨': '不滿', '怨言': '不滿', '怨聲': '不滿', '怨氣': '不滿',
    '埋怨': '不滿', '牢騷': '不滿', '怨懟': '不滿', '怨恨': '不滿',
    '不悅': '不滿', '不樂': '不滿', '不快': '不滿', '不適': '不滿',
    '不舒服': '不滿', '不自在': '不滿', '不痛快': '不滿', '不舒坦': '不滿',
    '憤憤不平': '不滿', '憤懣': '不滿', '憤慨': '不滿', '怏怏不樂': '不滿',

    # 擔憂
    '擔心': '擔憂', '憂慮': '擔憂', '擔憂': '擔憂', '憂心': '擔憂',
    '焦慮': '擔憂', '焦急': '擔憂', '憂急': '擔憂', '憂悶': '擔憂',
    '憂愁': '擔憂', '憂傷': '擔憂', '憂鬱': '擔憂', '憂煩': '擔憂',
    '憂慮重重': '擔憂', '憂心忡忡': '擔憂', '憂心如焚': '擔憂', '憂思': '擔憂',
    '掛心': '擔憂', '掛慮': '擔憂', '牽掛': '擔憂', '介懷': '擔憂',
    '放心不下': '擔憂', '寢食難安': '擔憂', '坐立不安': '擔憂', '心神不寧': '擔憂',
    '憂愁': '擔憂', '憂悶': '擔憂', '憂傷': '擔憂', '憂鬱': '擔憂',
    '憂懼': '擔憂', '憂慮': '擔憂', '憂思': '擔憂', '憂煩': '擔憂',

    # 支持
    '支持': '支持', '贊同': '支持', '同意': '支持', '認可': '支持',
    '贊成': '支持', '支援': '支持', '擁護': '支持', '支撐': '支持',
    '支援': '支持', '支助': '支持', '支應': '支持', '支持者': '支持',
    '贊助': '支持', '贊助者': '支持', '贊同者': '支持', '支持者': '支持',
    '擁戴': '支持', '擁護': '支持', '擁立': '支持', '擁戴者': '支持',
    '認同': '支持', '認可': '支持', '認許': '支持', '認證': '支持',
    '贊許': '支持', '贊可': '支持', '贊揚': '支持', '贊美': '支持',
    '支持': '支持', '支援': '支持', '支助': '支持', '支應': '支持',

    # 後悔
    '後悔': '後悔', '懊悔': '後悔', '悔恨': '後悔', '遺憾': '後悔',
    '懊惱': '後悔', '悔不當初': '後悔', '追悔莫及': '後悔', '悔之晚矣': '後悔',
    '悔青': '後悔', '懊喪': '後悔', '自責': '後悔', '懺悔': '後悔',
    '痛悔': '後悔', '悔改': '後悔', '悔意': '後悔', '追悔': '後悔',
    '後悔莫及': '後悔', '悔不該': '後悔', '悔錯': '後悔', '悔過': '後悔',
    '悔恨交加': '後悔', '悔之不及': '後悔', '追悔末及': '後悔', '悔不絕': '後悔',
    '悔悟': '後悔', '悔恨不已': '後悔', '悔不堪言': '後悔', '追悔無及': '後悔',
    '悔之無及': '後悔', '追悔不及': '後悔', '懊惱不已': '後悔', '悔恨萬分': '後悔',
    '悔不迭': '後悔', '追悔不已': '後悔', '懊惱不堪': '後悔', '懺悔不已': '後悔',

    # 麻煩
#   '麻煩': '麻煩', '困擾': '麻煩', '棘手': '麻煩', '難辦': '麻煩',
#   '費事': '麻煩', '累贅': '麻煩', '添亂': '麻煩', '攪擾': '麻煩',
#   '勞煩': '麻煩', '為難': '麻煩', '費神': '麻煩', '費力': '麻煩',
#   '費時': '麻煩', '勞師動眾': '麻煩', '添麻煩': '麻煩', '惹麻煩': '麻煩',
#   '找麻煩': '麻煩', '製造麻煩': '麻煩', '帶來麻煩': '麻煩', '出狀況': '麻煩',
#   '出問題': '麻煩', '徒增麻煩': '麻煩', '添堵': '麻煩', '費周章': '麻煩',
#   '勞駕': '麻煩', '勞累': '麻煩', '打擾': '麻煩', '困境': '麻煩',
#   '難處': '麻煩', '艱難': '麻煩', '繁瑣': '麻煩', '複雜': '麻煩',
#   '費工夫': '麻煩', '費勁': '麻煩', '費心': '麻煩', '費功夫': '麻煩',

    # 成功
    '成功': '成功', '達成': '成功', '實現': '成功', '完成': '成功',
    '做到': '成功', '成就': '成功', '贏得': '成功', '征服': '成功',
    '突破': '成功', '得勝': '成功', '成功率': '成功', '告捷': '成功',
    '大功告成': '成功', '功德圓滿': '成功', '圓滿': '成功', '順利': '成功',
    '達標': '成功', '成效': '成功', '建樹': '成功', '創舉': '成功',
    '突破性': '成功', '里程碑': '成功', '佳績': '成功', '捷報': '成功',
    '創下紀錄': '成功', '成果': '成功', '斬獲': '成功', '勝利': '成功',
    '獲勝': '成功', '奪冠': '成功', '稱霸': '成功', '成名': '成功',
    '出人頭地': '成功', '平步青雲': '成功', '登峰造極': '成功', '揚名立萬': '成功',

    # 謝謝
    '謝謝': '謝謝', '感謝': '謝謝', '感恩': '謝謝', '多謝': '謝謝',
    '致謝': '謝謝', '謝意': '謝謝', '感激': '謝謝', '感念': '謝謝',
    '謝天謝地': '謝謝', '萬分感謝': '謝謝', '銘謝': '謝謝', '道謝': '謝謝',
    '答謝': '謝謝', '謝禮': '謝謝', '謝忱': '謝謝', '謝函': '謝謝',
    '謝卡': '謝謝', '謝詞': '謝謝', '謝信': '謝謝', '感恩戴德': '謝謝',
    '感激不盡': '謝謝', '感激涕零': '謝謝', '感謝不盡': '謝謝', '感恩圖報': '謝謝',
    '感激萬分': '謝謝', '感激不已': '謝謝', '感激莫名': '謝謝', '銘感五內': '謝謝',
    '感激之情': '謝謝', '感謝之意': '謝謝', '謝意難盡': '謝謝', '感激之至': '謝謝',
    '感恩之心': '謝謝', '感激之心': '謝謝', '感謝之心': '謝謝', '謝意難表': '謝謝',

    # 優惠
    '優惠': '優惠', '特價': '優惠', '折扣': '優惠', '促銷': '優惠',
    '減價': '優惠', '便宜': '優惠', '划算': '優惠', '優待': '優惠',
    '優勢': '優惠', '實惠': '優惠', '優惠券': '優惠', '折價券': '優惠',
    '特惠': '優惠', '優惠價': '優惠', '限時優惠': '優惠', '折扣價': '優惠',
    '特賣': '優惠', '讓利': '優惠', '折讓': '優惠', '優惠方案': '優惠',
    '優惠活動': '優惠', '折價': '優惠', '減免': '優惠', '促銷價': '優惠',
    '特價品': '優惠', '優待券': '優惠', '回饋': '優惠', '優惠卷': '優惠',
    '特惠價': '優惠', '優惠專案': '優惠', '優惠期間': '優惠', '促銷活動': '優惠',
    '打折': '優惠', '降價': '優惠', '特價優惠': '優惠', '限時特價': '優惠',

    # 有趣
    '有趣': '有趣', '有意思': '有趣', '好玩': '有趣', '有意思': '有趣',
    '逗趣': '有趣', '趣味': '有趣', '妙趣': '有趣', '風趣': '有趣',
    '幽默': '有趣', '搞笑': '有趣', '有梗': '有趣', '趣味性': '有趣',
    '饒富趣味': '有趣', '富趣味': '有趣', '趣味橫生': '有趣', '趣味盎然': '有趣',
    '饒富意趣': '有趣', '趣味十足': '有趣', '趣味無窮': '有趣', '妙趣橫生': '有趣',
    '趣味性強': '有趣', '趣味豐富': '有趣', '趣味無限': '有趣', '趣味盎然': '有趣',
    '妙不可言': '有趣', '妙趣無窮': '有趣', '趣味橫溢': '有趣', '趣味無窮': '有趣',
    '趣味盎然': '有趣', '妙趣橫生': '有趣', '趣味性強': '有趣', '趣味豐富': '有趣',
    '趣味無限': '有趣', '趣味十足': '有趣', '趣味橫生': '有趣', '趣味盎然': '有趣',

    # 願意
    '願意': '願意', '情願': '願意', '樂意': '願意', '甘願': '願意',
    '同意': '願意', '肯定': '願意', '答應': '願意', '首肯': '願意',
    '允許': '願意', '應允': '願意', '贊同': '願意', '認可': '願意',
    '默許': '願意', '准許': '願意', '批准': '願意', '准予': '願意',
    '應承': '願意', '應允': '願意', '贊成': '願意', '同意見': '願意',
    '允准': '願意', '同情': '願意', '贊許': '願意', '贊可': '願意',
    '認同': '願意', '承認': '願意', '承諾': '願意', '應許': '願意',
    '答應': '願意', '應諾': '願意', '樂於': '願意', '甘於': '願意',
    '願為': '願意', '樂為': '願意', '心甘情願': '願意', '甘之如飴': '願意'
}

# 情緒分類
EMOTION_CATEGORIES = {
    '喜悅': 1,    # 正面情緒
    '安心': 1,    # 正面情緒
    '期待': 1,    # 正面情緒
    '正面': 1,    # 正面情緒
    '支持': 1,    # 正面情緒
    '成功': 1,    # 正面情緒
    '謝謝': 1,    # 正面情緒
    '優惠': 1,    # 正面情緒
    '有趣': 1,    # 正面情緒
    '願意': 1,    # 正面情緒
    '驚訝': 0,    # 中性情緒
    '生氣': -1,   # 負面情緒
    '討厭': -1,   # 負面情緒
    '難過': -1,   # 負面情緒
    '焦慮': -1,   # 負面情緒
    '反感': -1,   # 負面情緒
    '失望': -1,   # 負面情緒
    '違規': -1,   # 負面情緒
    '貶低': -1,   # 負面情緒
    '憤怒': -1,   # 負面情緒
    '厭惡': -1,   # 負面情緒
    '質疑': -1,   # 負面情緒
    '諷刺': -1,   # 負面情緒
    '不滿': -1,   # 負面情緒
    '擔憂': -1,   # 負面情緒
    '後悔': -1,   # 負面情緒
    '麻煩': -1,   # 負面情緒
}

"""### ***Data Cleaning & Transformation***"""

# Commented out IPython magic to ensure Python compatibility.
# ---- ---- ---- ---- 格式化日期 ---- ---- ---- ---- ---- ---- ---- ----
def format_date(date_string):
    """
    統一處理兩種不同格式的日期:
    1. MM/DD 格式 (來自PTT)
    2. ISO格式 (來自Dcard) 2024-10-19T08:25:47.246Z
    """
    try:
        if not date_string:
            return None

        if "/" in date_string:  # PTT格式
            date_obj = datetime.strptime(date_string, "%m/%d")
            return f"2024-{date_obj.month:02d}-{date_obj.day:02d}"
        elif "T" in date_string:  # Dcard ISO格式
            date_obj = datetime.fromisoformat(date_string.replace('Z', '+00:00'))
            return f"2024-{date_obj.month:02d}-{date_obj.day:02d}"
        else:
            return None
    except Exception as e:
        print(f"日期解析錯誤: {e}, 日期字串: {date_string}")
        return None
# ---- ---- ---- ---- 詞頻 ---- ---- ---- ---- ---- ---- ---- ---- ----
def analyze_posts(contents, stopwords):
    """
    分析文章內容，返回關鍵字和出現次數的列表
    """
    keywords = []
    for content in contents:
        if not isinstance(content, str):
            continue

        # 使用結巴分詞
        seg_list = list(jieba.cut(content))

        # 過濾停用詞並統計詞頻
        word_freq = Counter(word for word in seg_list if word not in stopwords and len(word) > 1)

        # 將所有關鍵字和頻率加入結果列表
        keywords.extend(word_freq.items())

    return keywords
# ---- ---- ---- ---- 詞頻排名 ---- ---- ---- ---- ---- ---- ---- ---- ----
def get_top_keywords(keyword_dict, n=3):
    """
    從關鍵字字典中獲取前N個關鍵字及其出現次數
    """
    top_n = heapq.nlargest(n, keyword_dict.items(), key=lambda x: x[1])
    keywords = []
    counts = []

    for keyword, count in top_n:
        keywords.append(keyword)
        counts.append(count)

    # 補足到指定長度
    while len(keywords) < n:
        keywords.append(None)
        counts.append(None)

    return keywords, counts
# ---- ---- ---- ---- 日期檢查 ---- ---- ---- ---- ---- ---- ---- ----
def get_date_from_document(document):
    """
    從文件中提取日期，處理多種可能的日期欄位名稱
    """
    if not isinstance(document, dict) or 'value' not in document:
        return None

    value = document['value']
    if not isinstance(value, dict):
        return None

    # 檢查所有可能的日期欄位名稱
    date_field_names = ['發布時間', '發佈時間', '釋出日期', '發佈日期']
    for field_name in date_field_names:
        if field_name in value and value[field_name]:
            return format_date(value[field_name])

    return None
# ---- ---- ---- ---- 連接至MySQL ---- ---- ---- ---- ---- ---- ----
def connect_to_mysql():
    """
    建立MySQL連接
    """
    connection = None
    try:
        connection = mysql.connector.connect(
            host='34.81.244.193',
            database='PTT',
            user='user3',
            password='password3'
        )

        if connection.is_connected():
            print("成功連線到 MySQL 資料庫")
            cursor = connection.cursor()
            cursor.execute("USE PTT;")
            print("已選擇資料庫：PTT")
            return connection, cursor

    except Error as e:
        print(f"連線錯誤: {e}")

    return connection, None
# ---- ---- ---- ---- 處理一個集合 ---- ---- ---- ---- ---- ---- ----
def process_collection(collection, stopwords):
    """
    處理單一collection的文件
    """
    keyword_counts = defaultdict(lambda: defaultdict(int))
    batch_size = 5000
    counter = 0
    total_count = collection.count_documents({})
    date_format_stats = defaultdict(int)
    processed_posts = set()  # 用於追蹤已處理的文章

    print(f"開始處理 collection {collection.name}, 總文件數: {total_count}")

    while counter < total_count:
        cursor = collection.find().skip(counter).limit(batch_size)
        documents = list(cursor)

        if not documents:
            break

        for document in documents:
            try:
                # 獲取文章ID
                post_id = str(document.get('_id'))
                if post_id in processed_posts:
                    continue

                # 檢查value字段
                if 'value' not in document:
                    print(f"文件缺少value欄位: {post_id}")
                    continue

                value = document['value']
                if not isinstance(value, dict):
                    print(f"value欄位不是字典格式: {post_id}")
                    continue

                # 提取日期
                publish_date = get_date_from_document(document)
                if not publish_date:
                    print(f"無法解析日期: {post_id}")
                    continue

                # 提取內容
                content = value.get('內容')
                if not content:
                    print(f"文件缺少內容: {post_id}")
                    continue

                # 更新日期格式統計
                source = 'PTT' if "ptt.cc" in str(value.get('連結', '')) else 'Dcard'
                date_format_stats[source] += 1

                # 處理內容和關鍵字
                keywords = analyze_posts([content], stopwords)
                if keywords:
                    for keyword, count in keywords:
                        keyword_counts[publish_date][keyword] += count

                processed_posts.add(post_id)

            except Exception as e:
                print(f"處理文件時發生錯誤 {post_id}: {str(e)}")
                continue

        counter += batch_size
        print(f"已處理 {counter}/{total_count} 筆文件")

    # 輸出統計資訊
    print("\n日期格式統計:")
    for format_type, count in date_format_stats.items():
        print(f"{format_type}: {count} 筆")

    # 將結果轉換為DataFrame
    daily_top_keywords = []

    for date in sorted(keyword_counts.keys()):
        keywords, counts = get_top_keywords(keyword_counts[date])
        daily_top_keywords.append({
            "發佈日期": date,
            "關鍵字1": keywords[0],
            "次數1": counts[0],
            "關鍵字2": keywords[1],
            "次數2": counts[1],
            "關鍵字3": keywords[2],
            "次數3": counts[2]
        })

    result_df = pd.DataFrame(daily_top_keywords)

    # 顯示處理結果統計
    print(f"\n總共處理了 {len(result_df)} 個不同日期")
    if not result_df.empty:
        print(f"每個日期的關鍵字數量: {(len(result_df.columns) - 1) // 2}")
    else:
        print("警告: 未產生任何結果")

    return result_df
# ---- ---- ---- ---- 結果匯入MySQL ---- ---- ---- ---- ---- ---- ----
def update_keywords_table(connection, cursor, df):
    """
    將關鍵字統計結果更新到MySQL資料庫

    Parameters:
    -----------
    connection : mysql.connector.connection
        MySQL資料庫連接
    cursor : mysql.connector.cursor
        MySQL資料庫游標
    df : pandas.DataFrame
        包含關鍵字統計結果的DataFrame，需要包含以下欄位：
        - 發佈日期
        - 關鍵字1, 關鍵字2, 關鍵字3
        - 次數1, 次數2, 次數3
    """
    try:
        # 建立關鍵字表（如果不存在）
        create_table_query = """
        CREATE TABLE IF NOT EXISTS daily_keywords (
            id INT AUTO_INCREMENT PRIMARY KEY,
            publish_date DATE NOT NULL,
            keyword1 VARCHAR(100),
            count1 INT,
            keyword2 VARCHAR(100),
            count2 INT,
            keyword3 VARCHAR(100),
            count3 INT,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            UNIQUE KEY unique_date (publish_date)
        ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
        """
        cursor.execute(create_table_query)
        connection.commit()

        # 準備更新語句
        update_query = """
        INSERT INTO daily_keywords
            (publish_date, keyword1, count1, keyword2, count2, keyword3, count3)
        VALUES
            (%s, %s, %s, %s, %s, %s, %s)
        ON DUPLICATE KEY UPDATE
            keyword1 = VALUES(keyword1),
            count1 = VALUES(count1),
            keyword2 = VALUES(keyword2),
            count2 = VALUES(count2),
            keyword3 = VALUES(keyword3),
            count3 = VALUES(count3);
        """

        # 逐行處理DataFrame
        for _, row in df.iterrows():
            try:
                data = (
                    row['發佈日期'],
                    row['關鍵字1'],
                    int(row['次數1']) if pd.notnull(row['次數1']) else None,
                    row['關鍵字2'],
                    int(row['次數2']) if pd.notnull(row['次數2']) else None,
                    row['關鍵字3'],
                    int(row['次數3']) if pd.notnull(row['次數3']) else None
                )
                cursor.execute(update_query, data)

            except Exception as e:
                print(f"插入資料時發生錯誤，日期: {row['發佈日期']}, 錯誤: {str(e)}")
                continue

        # 提交所有更新
        connection.commit()
        print(f"成功更新 {len(df)} 筆關鍵字統計資料到資料庫")

    except Exception as e:
        print(f"更新資料庫時發生錯誤: {str(e)}")
        connection.rollback()
        raise

# -----------------------------------------------------------------------------------------------------------------------------------

# ---- ---- ---- ---- 情緒分析 ---- ---- ---- ---- ---- ---- ---- ---- ----
def analyze_emotions(text):
    """
    分析文本中的情緒詞並返回詳細的情緒分析結果
    """
    if not text:
        return defaultdict(int), defaultdict(int)

    words = jieba.lcut(text)
    emotion_word_counts = defaultdict(int)
    emotion_category_counts = defaultdict(int)

    for word in words:
        if word in EMOTION_DICT:
            emotion_word = word
            emotion_category = EMOTION_DICT[word]
            emotion_word_counts[emotion_word] += 1
            emotion_category_counts[emotion_category] += 1

    return emotion_word_counts, emotion_category_counts
# ---- ---- ---- ---- 排名 ---- ---- ---- ---- ---- ---- ---- ---- ----
def get_top_emotions(emotion_dict, category_dict, n=5):
    """
    獲取出現頻率最高的情緒詞和情緒類別
    """
    top_words = sorted(emotion_dict.items(), key=lambda x: x[1], reverse=True)[:n]
    categories = sorted(category_dict.items(), key=lambda x: x[1], reverse=True)

    words = []
    counts = []
    categories_list = []
    category_counts = []

    for word, count in top_words:
        words.append(word)
        counts.append(count)

    while len(words) < n:
        words.append(None)
        counts.append(None)

    for category, count in categories:
        categories_list.append(category)
        category_counts.append(count)

    return words, counts, categories_list, category_counts
# ---- ---- ---- ---- 處理一個集合 ---- ---- ---- ---- ---- ---- ----
def process_single_collection(collection, processed_links):
    """
    處理單個collection中的文檔，依據日期分別處理並避免重複貼文
    """
    batch_size = 5000
    counter = 0
    total_count = collection.count_documents({})

    # 用於儲存每個日期的情緒統計
    date_emotion_counts = defaultdict(lambda: defaultdict(int))
    date_category_counts = defaultdict(lambda: defaultdict(int))

    while counter < total_count:
        cursor = collection.find().skip(counter).limit(batch_size)
        documents = list(cursor)

        if not documents:
            break

        for document in documents:
            try:
                # 取得連結
                link = document["value"].get("連結") or document.get("連結")
                if not link:
                    continue

                # 取得發布日期
                publish_date = document["value"].get("發佈日期") or document.get("發布時間")
                formatted_date = format_date(publish_date)

                if not formatted_date:
                    continue

                # 取得內容
                content = document["value"].get("內容") or document.get("內容")
                if not content:
                    continue

                # 檢查是否已處理過該連結
                if link in processed_links:
                    old_date = processed_links[link]['date']
                    # 如果新的日期較舊，則跳過
                    if formatted_date <= old_date:
                        continue
                    # 如果新的日期較新，需要移除舊的統計
                    old_word_counts = processed_links[link]['word_counts']
                    old_category_counts = processed_links[link]['category_counts']
                    for word, count in old_word_counts.items():
                        date_emotion_counts[old_date][word] -= count
                    for category, count in old_category_counts.items():
                        date_category_counts[old_date][category] -= count

                # 分析新內容的情緒
                word_counts, category_counts = analyze_emotions(content)

                # 更新該日期的情緒統計
                for word, count in word_counts.items():
                    date_emotion_counts[formatted_date][word] += count
                for category, count in category_counts.items():
                    date_category_counts[formatted_date][category] += count

                # 更新處理過的連結資訊
                processed_links[link] = {
                    'date': formatted_date,
                    'word_counts': word_counts,
                    'category_counts': category_counts
                }

            except Exception as e:
                print(f"處理文件時發生錯誤: {str(e)}")
                continue

        counter += batch_size
        print(f"已處理 {counter} 筆文件")

    return date_emotion_counts, date_category_counts
# ---- ---- ---- ---- 處理所有集合 ---- ---- ---- ---- ---- ---- ----
def process_all_collections(collection):
    """
    處理collection並生成結果DataFrame
    """
    processed_links = {}  # 用於追蹤所有文件中的連結
    all_date_emotion_counts = defaultdict(lambda: defaultdict(int))
    all_date_category_counts = defaultdict(lambda: defaultdict(int))

    # 處理collection
    print(f"開始處理 collection: {collection.name}")
    date_emotion_counts, date_category_counts = process_single_collection(
        collection,
        processed_links
    )

    # 合併結果
    for date in date_emotion_counts:
        for word, count in date_emotion_counts[date].items():
            all_date_emotion_counts[date][word] += count
        for category, count in date_category_counts[date].items():
            all_date_category_counts[date][category] += count

    # 建立新的 DataFrame 儲存每日情緒分析結果
    daily_emotions = []

    for date in sorted(all_date_emotion_counts.keys()):
        words, counts, categories, category_counts = get_top_emotions(
            all_date_emotion_counts[date],
            all_date_category_counts[date]
        )

        # 計算主要情緒
        dominant_emotion = categories[0] if categories else None
        emotion_score = sum(count * EMOTION_CATEGORIES[cat]
                          for cat, count in zip(categories, category_counts))

        daily_emotions.append({
            "發佈日期": date,
            "心情詞語1": words[0],
            "次數1": counts[0],
            "心情詞語2": words[1],
            "次數2": counts[1],
            "心情詞語3": words[2],
            "次數3": counts[2],
            "心情詞語4": words[3],
            "次數4": counts[3],
            "心情詞語5": words[4],
            "次數5": counts[4],
            "主要情緒": dominant_emotion,
            "情緒分數": emotion_score
        })

    return pd.DataFrame(daily_emotions)

# ---- ---- ---- ---- 結果匯入MySQL ---- ---- ---- ---- ---- ---- ----
def update_sentiment_table(connection, cursor, result_df):
    """
    更新MySQL資料庫中的情緒分析表
    """
    try:
        # 創建情緒分析表（如果不存在）
        create_table_query = """
        CREATE TABLE IF NOT EXISTS emotion_analysis (
            發佈日期 DATE PRIMARY KEY,
            心情詞語1 VARCHAR(50),
            次數1 INT,
            心情詞語2 VARCHAR(50),
            次數2 INT,
            心情詞語3 VARCHAR(50),
            次數3 INT,
            心情詞語4 VARCHAR(50),
            次數4 INT,
            心情詞語5 VARCHAR(50),
            次數5 INT,
            主要情緒 VARCHAR(50),
            情緒分數 INT
        )
        """
        cursor.execute(create_table_query)

        for index, row in result_df.iterrows():
            # 檢查是否存在相同日期的資料
            check_query = "SELECT * FROM emotion_analysis WHERE 發佈日期 = %s"
            cursor.execute(check_query, (row['發佈日期'],))
            existing_record = cursor.fetchone()

            if existing_record:
                # 如果存在，先刪除該日期的資料
                delete_query = "DELETE FROM emotion_analysis WHERE 發佈日期 = %s"
                cursor.execute(delete_query, (row['發佈日期'],))

            # 插入新的資料
            insert_query = """
                INSERT INTO emotion_analysis (
                     發佈日期, 心情詞語1, 次數1, 心情詞語2, 次數2,
                     心情詞語3, 次數3, 心情詞語4, 次數4, 心情詞語5, 次數5,
                     主要情緒, 情緒分數
                 )
                 VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
             """
             data = (
                 row['發佈日期'],
                 row['心情詞語1'],
                 row['次數1'],
                 row['心情詞語2'],
                 row['次數2'],
                 row['心情詞語3'],
                 row['次數3'],
                 row['心情詞語4'],
                 row['次數4'],
                row['心情詞語5'],
                 row['次數5'],
                 row['主要情緒'],
                 row['情緒分數']
            )
            cursor.execute(insert_query, data)

        # 提交所有更改
        connection.commit()
        print("資料更新完成")

    except Error as e:
         print(f"資料更新過程發生錯誤: {e}")
        connection.rollback()
        raise e

# --------------------------------------------------------------------------------------------------------------------------------
class DatabaseManager:
    def __init__(self):
        # MongoDB 連接設定
        self.mongo_uri = "mongodb+srv://TIR103:password6341@tir103.higsi.mongodb.net/?retryWrites=true&w=majority"
        self.mongo_client = None
        self.mysql_conn = None
        self.mysql_cursor = None

    def connect_mongodb(self):
        try:
            self.mongo_client = MongoClient(self.mongo_uri)
            self.db = self.mongo_client['kafka']
            # 使用單一collection
            self.collection = self.db['kafka_collection_all']
            logging.info("Successfully connected to MongoDB")
        except Exception as e:
            logging.error(f"MongoDB connection error: {e}")
            raise

    def connect_mysql(self):
        """建立MySQL連接"""
        try:
            self.mysql_conn = mysql.connector.connect(
                host='34.81.244.193',
                database='PTT',
                user='user3',
                password='password3'
            )

            if self.mysql_conn.is_connected():
                self.mysql_cursor = self.mysql_conn.cursor()
                self.mysql_cursor.execute("USE PTT;")
                logging.info("Successfully connected to MySQL database")
                return True
        except Error as e:
            logging.error(f"MySQL connection error: {e}")
            raise
        return False

    def create_tables(self):
        try:

          # 刪除已存在的表
          self.mysql_cursor.execute("DROP TABLE IF EXISTS posts;")
          self.mysql_conn.commit()
          logging.info("Tables dropped successfully")

          # 建立新的表 posts
            self.mysql_cursor.execute("""
                CREATE TABLE IF NOT EXISTS posts (
                    id VARCHAR(255) PRIMARY KEY,
                    來源 VARCHAR(50),
                    日期 DATE,
                    連結 VARCHAR(255),
                    主題 VARCHAR(100),
                    標題 TEXT,
                    內容 TEXT,
                    留言數 INT,
                    正向心情1 VARCHAR(50),
                    正向心情次數1 INT,
                    正向心情2 VARCHAR(50),
                    正向心情次數2 INT,
                    正向心情3 VARCHAR(50),
                    正向心情次數3 INT,
                    負向心情1 VARCHAR(50),
                    負向心情次數1 INT,
                    負向心情2 VARCHAR(50),
                    負向心情次數2 INT,
                    負向心情3 VARCHAR(50),
                    負向心情次數3 INT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                    UNIQUE KEY unique_link (連結)
                ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
            """)


            try:
                self.mysql_cursor.execute("CREATE INDEX idx_post_date ON posts(日期);")
                self.mysql_cursor.execute("CREATE INDEX idx_post_link ON posts(連結);")
            except Error as e:
                if e.errno != 1061:  # 1061 是索引已存在的錯誤碼
                    raise e

            self.mysql_conn.commit()
            logging.info("Tables and indexes created successfully")
        except Error as e:
            logging.error(f"Error creating tables: {e}")
            raise



    def close_connections(self):
        """關閉所有資料庫連接"""
        try:
            if self.mysql_cursor:
                self.mysql_cursor.close()
            if self.mysql_conn:
                self.mysql_conn.close()
            if self.mongo_client:
                self.mongo_client.close()
            logging.info("All database connections closed successfully")
        except Exception as e:
            logging.error(f"Error closing database connections: {e}")

class PostAnalyzer:
    def __init__(self):
        self.db_manager = DatabaseManager()
        self.db_manager.connect_mongodb()
        self.db_manager.connect_mysql()
        self.batch_size = 1000
        self.processed_links = {}  # 儲存已處理的連結和對應的最新日期
        self.load_processed_links()
# ---- ---- ---- ---- 處理文件 ---- ---- ---- ---- ---- ---- ---- ----
    def process_documents(self):
        """處理文件"""
        try:
            # 使用單一collection查詢
            documents = list(self.db_manager.collection.find({}))
            batch = []
            temp_posts = {}  # 暫存貼文，用於比較同一連結的不同版本

            for doc in documents:
                processed_data = self.process_single_document(doc)
                if not processed_data:
                    continue

                link = processed_data.get('link')
                date_str = processed_data.get('date')

                if not link or not date_str:
                    continue

                # Convert string date to datetime.date object for comparison
                try:
                    current_date = datetime.strptime(date_str, '%Y-%m-%d').date()
                except ValueError:
                    continue

                # 如果連結已存在於暫存中，比較日期並保留最新的
                if link in temp_posts:
                    temp_date = datetime.strptime(temp_posts[link]['date'], '%Y-%m-%d').date()
                    if current_date > temp_date:
                        temp_posts[link] = processed_data
                else:
                    temp_posts[link] = processed_data

                # 如果連結已在資料庫中且新的日期不是更新的，則跳過
                if link in self.processed_links:
                    stored_date = self.processed_links[link]
                    if isinstance(stored_date, str):
                        stored_date = datetime.strptime(stored_date, '%Y-%m-%d').date()
                    if current_date <= stored_date:
                        continue

            # 將暫存中的最新貼文加入批次
            batch.extend(temp_posts.values())

            if batch:
                self.save_batch(batch)

        except Exception as e:
            logging.error(f"Error processing documents: {e}")
            raise

    def load_processed_links(self):
        """載入已處理的文章連結和日期"""
        self.db_manager.mysql_cursor.execute("SELECT 連結, 日期 FROM posts")
        for link, date in self.db_manager.mysql_cursor.fetchall():
            if link:
                # Store the date as a string in 'YYYY-MM-DD' format
                self.processed_links[link] = date.strftime('%Y-%m-%d') if date else None
# ---- ---- ---- ---- 格式化日期 ---- ---- ---- ---- ---- ---- ---- ----
    @lru_cache(maxsize=1000)
    def format_date(self, date_string: str) -> str:
        """格式化日期，使用快取提高效能"""
        try:
            if not date_string:
                return None

            if "/" in date_string:
                date_obj = datetime.strptime(date_string, "%m/%d")
                return f"2024-{date_obj.month:02d}-{date_obj.day:02d}"
            elif "T" in date_string:
                date_obj = datetime.fromisoformat(date_string.replace('Z', '+00:00'))
                return f"2024-{date_obj.month:02d}-{date_obj.day:02d}"
            return None
        except Exception as e:
            logging.error(f"Date parsing error: {e}, date string: {date_string}")
            return None
# ---- ---- ---- ---- 處理資料 ---- ---- ---- ---- ---- ---- ---- ----
    def process_emotions(self, emotions_dict: Dict, is_positive: bool) -> List[tuple]:
        """處理情緒數據"""
        if is_positive:
            relevant_emotions = {'愛心': 0, '哈哈': 0, '跪': 0} if isinstance(emotions_dict, dict) else {'推': emotions_dict}
        else:
            relevant_emotions = {'驚訝': 0, '嗚嗚': 0, '森77': 0} if isinstance(emotions_dict, dict) else {'噓': emotions_dict}

        if isinstance(emotions_dict, dict):
            for emotion, count in emotions_dict.items():
                if emotion in relevant_emotions:
                    relevant_emotions[emotion] = int(count)

        return sorted(relevant_emotions.items(), key=lambda x: int(x[1]), reverse=True)[:3]
# ---- ---- ---- ---- 處理單一文件 ---- ---- ---- ---- ---- ---- ---- ----
    def process_single_document(self, doc: Dict) -> Dict:
        """處理單個文件"""
        try:
            post_id = str(doc['_id'])
            if 'value' not in doc:
                return None

            value = doc['value']
            if not isinstance(value, dict):
                return None

            source = 'PTT' if "ptt.cc" in doc.get('key', '') else 'Dcard' if "dcard.tw" in doc.get('key', '') else '其他'
            date = self.format_date(value.get('發布時間') or value.get('發佈日期'))
            link = value.get('連結')

            if not date or not link:
                return None

            title = value.get('標題', '')
            topic_match = re.search(r'\[(.*?)\]', title)
            topic = topic_match.group(1) if topic_match else '其他'
            clean_title = re.sub(r'\[.*?\]', '', title).strip()

            content = value.get('內容', '')
            comment_count = len(value.get('留言', [])) if value.get('留言') is not None else 0

            if source == 'Dcard':
                emoji_types = value.get('emoji類型', [{}])[0]
                positive_emotions = self.process_emotions(emoji_types, True)
                negative_emotions = self.process_emotions(emoji_types, False)
            else:
                positive_emotions = self.process_emotions(value.get('推', 0), True)
                negative_emotions = self.process_emotions(value.get('噓', 0), False)

            return {
                'id': post_id,
                'source': source,
                'date': date,
                'link': link,
                'topic': topic,
                'title': clean_title,
                'content': content,
                'comment_count': comment_count,
                'positive_emotions': positive_emotions,
                'negative_emotions': negative_emotions
            }

        except Exception as e:
            logging.error(f"Error processing document {post_id}: {e}")
            return None
# ---- ---- ---- ---- 批量保存 ---- ---- ---- ---- ---- ---- ---- ----
    def save_batch(self, batch: List[Dict]):
        """批量保存資料"""
        for post_data in batch:
            try:
                self.save_post(post_data)
                self.processed_links[post_data['link']] = post_data['date']
            except Exception as e:
                logging.error(f"Error saving batch data: {e}")
                continue
# ---- ---- ---- ---- 匯入MySQL ---- ---- ---- ---- ---- ---- ---- ----
    def save_post(self, post_data: Dict):
        """保存文章到MySQL"""
        try:
            insert_post_query = """
                INSERT INTO posts (
                    id, 來源, 日期, 連結, 主題, 標題, 內容, 留言數,
                    正向心情1, 正向心情次數1, 正向心情2, 正向心情次數2, 正向心情3, 正向心情次數3,
                    負向心情1, 負向心情次數1, 負向心情2, 負向心情次數2, 負向心情3, 負向心情次數3
                )
                VALUES (
#                     %s, %s, %s, %s, %s, %s, %s, %s,
#                     %s, %s, %s, %s, %s, %s,
#                     %s, %s, %s, %s, %s, %s
                )
                ON DUPLICATE KEY UPDATE
                來源 = VALUES(來源),
                日期 = VALUES(日期),
                主題 = VALUES(主題),
                標題 = VALUES(標題),
                內容 = VALUES(內容),
                留言數 = VALUES(留言數),
                正向心情1 = VALUES(正向心情1),
                正向心情次數1 = VALUES(正向心情次數1),
                正向心情2 = VALUES(正向心情2),
                正向心情次數2 = VALUES(正向心情次數2),
                正向心情3 = VALUES(正向心情3),
                正向心情次數3 = VALUES(正向心情次數3),
                負向心情1 = VALUES(負向心情1),
                負向心情次數1 = VALUES(負向心情次數1),
                負向心情2 = VALUES(負向心情2),
                負向心情次數2 = VALUES(負向心情次數2),
                負向心情3 = VALUES(負向心情3),
                負向心情次數3 = VALUES(負向心情次數3)
            """

            pos_emotions = list(post_data['positive_emotions'])
            pos_emotions.extend([('', 0)] * (3 - len(pos_emotions)))

            neg_emotions = list(post_data['negative_emotions'])
            neg_emotions.extend([('', 0)] * (3 - len(neg_emotions)))

            self.db_manager.mysql_cursor.execute(insert_post_query, (
                post_data['id'],
                post_data['source'],
                post_data['date'],
                post_data['link'],
                post_data['topic'],
                post_data['title'],
                post_data['content'],
                post_data['comment_count'],
                pos_emotions[0][0], pos_emotions[0][1],
                pos_emotions[1][0], pos_emotions[1][1],
                pos_emotions[2][0], pos_emotions[2][1],
                neg_emotions[0][0], neg_emotions[0][1],
                neg_emotions[1][0], neg_emotions[1][1],
                neg_emotions[2][0], neg_emotions[2][1]
            ))

            self.db_manager.mysql_conn.commit()

        except Error as e:
            logging.error(f"Error saving post: {e}")
            self.db_manager.mysql_conn.rollback()
            raise
# ---- ---- ---- ---- 關閉MySQL連線 ---- ---- ---- ---- ---- ---- ---- ----
    def close_connections(self):
        """關閉資料庫連接"""
        try:
            if self.db_manager.mysql_cursor:
                self.db_manager.mysql_cursor.close()
            if self.db_manager.mysql_conn:
                self.db_manager.mysql_conn.close()
            if self.db_manager.mongo_client:
                self.db_manager.mongo_client.close()
            logging.info("Database connections closed")
        except Exception as e:
            logging.error(f"Error closing connections: {e}")
# ---- ---- ---- ---- 執行主程式 ---- ---- ---- ---- ---- ---- ---- ----
def main():
    """
    主程式: 處理MongoDB資料並建立三張MySQL表格
    1. daily_keywords: 每日關鍵字統計
    2. emotion_analysis: 每日貼文內容情緒分析
    3. posts: 各文章的情緒統計
    """
    # 設定日誌
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        filename='data_processing.log'
    )

    analyzer = None
    connection = None
    cursor = None

    try:
        # 建立資料庫連接
        logging.info("建立資料庫連接...")
        connection, cursor = connect_to_mysql()
        analyzer = PostAnalyzer()


        # 步驟1: 處理每日關鍵字
        logging.info("開始處理每日關鍵字...")
        keywords_df = process_collection(analyzer.db_manager.collection, stopwords)
        if not keywords_df.empty:
            update_keywords_table(connection, cursor, keywords_df)
            logging.info("每日關鍵字處理完成")

        # 步驟2: 處理每日情緒分析
        logging.info("開始處理每日情緒分析...")
        emotions_df = process_all_collections(analyzer.db_manager.collection)
        if not emotions_df.empty:
            update_sentiment_table(connection, cursor, emotions_df)
            logging.info("每日情緒分析處理完成")

        # 步驟3: 處理各文章情緒統計
        logging.info("開始處理文章情緒統計...")
        analyzer.process_documents()
        logging.info("文章情緒統計處理完成")

        logging.info("所有資料處理完成")

    except Exception as e:
        logging.error(f"處理過程發生錯誤: {e}")
        if connection:
            connection.rollback()
        raise

    finally:
        # 關閉所有連接
        logging.info("關閉資料庫連接...")
        if analyzer:
            analyzer.close_connections()
        if cursor:
            cursor.close()
        if connection:
            connection.close()
        logging.info("程式執行完成")

"""### ***Main***"""

if __name__ == "__main__":
    main()